;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 6/5/2023 12:47:13 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28F0      	GOTO       240
_Interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00AC      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00AD      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
;emmbeded_try_final.c,34 :: 		void Interrupt(void)
;emmbeded_try_final.c,38 :: 		if(INTCON & 0x02)
0x000D	0x1C8B      	BTFSS      INTCON, 1
0x000E	0x2847      	GOTO       L_Interrupt2
;emmbeded_try_final.c,40 :: 		if(EchoStartEnd == 0)   // True when a raising edge triggers RB0
0x000F	0x0821      	MOVF       _EchoStartEnd, 0
0x0010	0x3A00      	XORLW      0
0x0011	0x1D03      	BTFSS      STATUS, 2
0x0012	0x281D      	GOTO       L_Interrupt3
;emmbeded_try_final.c,43 :: 		TMR0 = 6;                       // Load 6 in timer0, so it will over-flow after 250 counts
0x0013	0x3006      	MOVLW      6
0x0014	0x0081      	MOVWF      TMR0
;emmbeded_try_final.c,45 :: 		OverFlow = 0;            	// initializing with zero
0x0015	0x01A2      	CLRF       _OverFlow
0x0016	0x01A3      	CLRF       _OverFlow+1
;emmbeded_try_final.c,46 :: 		OPTION_REG = OPTION_REG & 0xBF; // Interrupt edge select bit = 0 ----> External interrupt will trigger at the next incoming falling edge
0x0017	0x30BF      	MOVLW      191
0x0018	0x1683      	BSF        STATUS, 5
0x0019	0x0581      	ANDWF      OPTION_REG, 1
;emmbeded_try_final.c,47 :: 		EchoStartEnd++;      	  // increase the counter by one to get into "else" at the next incoming falling edge
0x001A	0x1283      	BCF        STATUS, 5
0x001B	0x0AA1      	INCF       _EchoStartEnd, 1
;emmbeded_try_final.c,48 :: 		}
0x001C	0x2845      	GOTO       L_Interrupt4
L_Interrupt3:
;emmbeded_try_final.c,52 :: 		EchoTime = (OverFlow * 250) + (TMR0 - 6); // Overall Period = Over-flow Counts * 250uS + (Timer0 value in uS - 6us)
0x001D	0x0822      	MOVF       _OverFlow, 0
0x001E	0x00F0      	MOVWF      R0
0x001F	0x0823      	MOVF       _OverFlow+1, 0
0x0020	0x00F1      	MOVWF      R0+1
0x0021	0x30FA      	MOVLW      250
0x0022	0x00F4      	MOVWF      R4
0x0023	0x01F5      	CLRF       R4+1
0x0024	0x20C5      	CALL       _Mul_16X16_U
0x0025	0x3006      	MOVLW      6
0x0026	0x0201      	SUBWF      TMR0, 0
0x0027	0x00F2      	MOVWF      R2
0x0028	0x01F3      	CLRF       R2+1
0x0029	0x1C03      	BTFSS      STATUS, 0
0x002A	0x03F3      	DECF       R2+1, 1
0x002B	0x0872      	MOVF       R2, 0
0x002C	0x07F0      	ADDWF      R0, 1
0x002D	0x0873      	MOVF       R2+1, 0
0x002E	0x1803      	BTFSC      STATUS, 0
0x002F	0x3E01      	ADDLW      1
0x0030	0x07F1      	ADDWF      R0+1, 1
0x0031	0x0870      	MOVF       R0, 0
0x0032	0x00A4      	MOVWF      _EchoTime
0x0033	0x0871      	MOVF       R0+1, 0
0x0034	0x00A5      	MOVWF      _EchoTime+1
;emmbeded_try_final.c,54 :: 		Distance = (17 * EchoTime)/1000;  // Distance = (The speed of sound) * (Period in uS)
0x0035	0x3011      	MOVLW      17
0x0036	0x00F4      	MOVWF      R4
0x0037	0x3000      	MOVLW      0
0x0038	0x00F5      	MOVWF      R4+1
0x0039	0x20C5      	CALL       _Mul_16X16_U
0x003A	0x30E8      	MOVLW      232
0x003B	0x00F4      	MOVWF      R4
0x003C	0x3003      	MOVLW      3
0x003D	0x00F5      	MOVWF      R4+1
0x003E	0x20A8      	CALL       _Div_16X16_U
0x003F	0x0870      	MOVF       R0, 0
0x0040	0x00A9      	MOVWF      _Distance
;emmbeded_try_final.c,60 :: 		OPTION_REG = OPTION_REG | 0x40; // Interrupt edge select bit = 1
0x0041	0x1683      	BSF        STATUS, 5
0x0042	0x1701      	BSF        OPTION_REG, 6
;emmbeded_try_final.c,62 :: 		EchoStartEnd = 0;      // Clear the counter value to get into "if" at the next incoming raising edge
0x0043	0x1283      	BCF        STATUS, 5
0x0044	0x01A1      	CLRF       _EchoStartEnd
;emmbeded_try_final.c,63 :: 		}
L_Interrupt4:
;emmbeded_try_final.c,64 :: 		INTCON = INTCON & 0xFD;          // Clear INTF
0x0045	0x30FD      	MOVLW      253
0x0046	0x058B      	ANDWF      INTCON, 1
;emmbeded_try_final.c,65 :: 		}
L_Interrupt2:
;emmbeded_try_final.c,68 :: 		if(INTCON & 0x04)
0x0047	0x1D0B      	BTFSS      INTCON, 2
0x0048	0x2853      	GOTO       L_Interrupt5
;emmbeded_try_final.c,70 :: 		TMR0 = 6;                        // Load 6 in timer0, so it will over-flow after 250 counts
0x0049	0x3006      	MOVLW      6
0x004A	0x0081      	MOVWF      TMR0
;emmbeded_try_final.c,72 :: 		OverFlow++;               // Increase the over-flow counts by one
0x004B	0x0AA2      	INCF       _OverFlow, 1
0x004C	0x1903      	BTFSC      STATUS, 2
0x004D	0x0AA3      	INCF       _OverFlow+1, 1
;emmbeded_try_final.c,73 :: 		Delay_Counter++;                 // Increase the delay counts by one
0x004E	0x0AA7      	INCF       _Delay_Counter, 1
0x004F	0x1903      	BTFSC      STATUS, 2
0x0050	0x0AA8      	INCF       _Delay_Counter+1, 1
;emmbeded_try_final.c,74 :: 		INTCON = INTCON & 0xFB;          // Clear T0IF
0x0051	0x30FB      	MOVLW      251
0x0052	0x058B      	ANDWF      INTCON, 1
;emmbeded_try_final.c,75 :: 		}
L_Interrupt5:
;emmbeded_try_final.c,76 :: 		}
L_end_Interrupt:
L__Interrupt18:
0x0053	0x0820      	MOVF       32, 0
0x0054	0x00F0      	MOVWF      R0
0x0055	0x082D      	MOVF       ___savePCLATH, 0
0x0056	0x008A      	MOVWF      PCLATH
0x0057	0x0E2C      	SWAPF      ___saveSTATUS, 0
0x0058	0x0083      	MOVWF      STATUS
0x0059	0x0EFF      	SWAPF      R15, 1
0x005A	0x0E7F      	SWAPF      R15, 0
0x005B	0x0009      	RETFIE
; end of _Interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x005C	0x1283      	BCF        STATUS, 5
0x005D	0x1303      	BCF        STATUS, 6
0x005E	0x082B      	MOVF       ___DoICPAddr+1, 0
0x005F	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0060	0x082A      	MOVF       ___DoICPAddr, 0
0x0061	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0062	0x0008      	RETURN
; end of _____DoICP
_SendTrigger:
;emmbeded_try_final.c,24 :: 		void SendTrigger(void)
;emmbeded_try_final.c,26 :: 		PORTC = PORTC | 0x01;                    // Trigger start, RC0 = 1
0x0063	0x1283      	BCF        STATUS, 5
0x0064	0x1303      	BCF        STATUS, 6
0x0065	0x1407      	BSF        PORTC, 0
;emmbeded_try_final.c,27 :: 		waste++; waste++; waste++; waste++; waste++; waste++; waste++; waste++; waste++; waste++; // Waste 5uS
0x0066	0x0AA6      	INCF       _waste, 1
0x0067	0x0AA6      	INCF       _waste, 1
0x0068	0x0AA6      	INCF       _waste, 1
0x0069	0x0AA6      	INCF       _waste, 1
0x006A	0x0AA6      	INCF       _waste, 1
0x006B	0x0AA6      	INCF       _waste, 1
0x006C	0x0AA6      	INCF       _waste, 1
0x006D	0x0AA6      	INCF       _waste, 1
0x006E	0x0AA6      	INCF       _waste, 1
0x006F	0x0AA6      	INCF       _waste, 1
;emmbeded_try_final.c,28 :: 		waste++; waste++; waste++; waste++; waste++; waste++; waste++; waste++; waste++; waste++; // Waste another 5uS
0x0070	0x0AA6      	INCF       _waste, 1
0x0071	0x0AA6      	INCF       _waste, 1
0x0072	0x0AA6      	INCF       _waste, 1
0x0073	0x0AA6      	INCF       _waste, 1
0x0074	0x0AA6      	INCF       _waste, 1
0x0075	0x0AA6      	INCF       _waste, 1
0x0076	0x0AA6      	INCF       _waste, 1
0x0077	0x0AA6      	INCF       _waste, 1
0x0078	0x0AA6      	INCF       _waste, 1
0x0079	0x0AA6      	INCF       _waste, 1
;emmbeded_try_final.c,29 :: 		PORTC = PORTC & 0xFE;                    // Trigger stop, RC0 = 0
0x007A	0x30FE      	MOVLW      254
0x007B	0x0587      	ANDWF      PORTC, 1
;emmbeded_try_final.c,30 :: 		}
L_end_SendTrigger:
0x007C	0x0008      	RETURN
; end of _SendTrigger
_CheckFront:
;emmbeded_try_final.c,78 :: 		void CheckFront(){
;emmbeded_try_final.c,79 :: 		PORTD = PORTD & 0x00;
0x007D	0x3000      	MOVLW      0
0x007E	0x1283      	BCF        STATUS, 5
0x007F	0x1303      	BCF        STATUS, 6
0x0080	0x0588      	ANDWF      PORTD, 1
;emmbeded_try_final.c,80 :: 		PORTD = PORTD | 0x20;  // D5 ON = Mid ultrasonic is on
0x0081	0x1688      	BSF        PORTD, 5
;emmbeded_try_final.c,81 :: 		SendTrigger();
0x0082	0x2063      	CALL       _SendTrigger
;emmbeded_try_final.c,82 :: 		PORTD = 0x0A;
0x0083	0x300A      	MOVLW      10
0x0084	0x0088      	MOVWF      PORTD
;emmbeded_try_final.c,83 :: 		}
L_end_CheckFront:
0x0085	0x0008      	RETURN
; end of _CheckFront
_msDelay:
;emmbeded_try_final.c,12 :: 		void msDelay(unsigned int Time)
;emmbeded_try_final.c,14 :: 		TMR0 = 6;                            // Load 6 in timer0, so it will over-flow after 250 counts
0x0086	0x3006      	MOVLW      6
0x0087	0x1283      	BCF        STATUS, 5
0x0088	0x1303      	BCF        STATUS, 6
0x0089	0x0081      	MOVWF      TMR0
;emmbeded_try_final.c,17 :: 		Delay_Counter = 0;                   // Start counting from zero
0x008A	0x01A7      	CLRF       _Delay_Counter
0x008B	0x01A8      	CLRF       _Delay_Counter+1
;emmbeded_try_final.c,18 :: 		Time = Time * 4;                     // 1mS = 4 * 250uS
0x008C	0x0DAE      	RLF        FARG_msDelay_Time, 1
0x008D	0x0DAF      	RLF        FARG_msDelay_Time+1, 1
0x008E	0x102E      	BCF        FARG_msDelay_Time, 0
0x008F	0x0DAE      	RLF        FARG_msDelay_Time, 1
0x0090	0x0DAF      	RLF        FARG_msDelay_Time+1, 1
0x0091	0x102E      	BCF        FARG_msDelay_Time, 0
;emmbeded_try_final.c,20 :: 		while (Delay_Counter < Time);        // Stuck here for "Time" in mS
L_msDelay0:
0x0092	0x082F      	MOVF       FARG_msDelay_Time+1, 0
0x0093	0x0228      	SUBWF      _Delay_Counter+1, 0
0x0094	0x1D03      	BTFSS      STATUS, 2
0x0095	0x2898      	GOTO       L__msDelay15
0x0096	0x082E      	MOVF       FARG_msDelay_Time, 0
0x0097	0x0227      	SUBWF      _Delay_Counter, 0
L__msDelay15:
0x0098	0x1803      	BTFSC      STATUS, 0
0x0099	0x289B      	GOTO       L_msDelay1
0x009A	0x2892      	GOTO       L_msDelay0
L_msDelay1:
;emmbeded_try_final.c,21 :: 		}
L_end_msDelay:
0x009B	0x0008      	RETURN
; end of _msDelay
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x009C	0x205C      	CALL       _____DoICP
0x009D	0x118A      	BCF        PCLATH, 3
0x009E	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x009F	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x00A0	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x00A1	0x0AAA      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x00A2	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x00A3	0x0AAB      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x00A4	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x00A5	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x00A6	0x289C      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x00A7	0x0008      	RETURN
; end of ___CC2DW
_Div_16X16_U:
;__Lib_Math.c,215 :: 		
;__Lib_Math.c,222 :: 		
0x00A8	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,223 :: 		
0x00A9	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,224 :: 		
0x00AA	0x01F8      	CLRF       R8
;__Lib_Math.c,225 :: 		
0x00AB	0x01F9      	CLRF       R9
;__Lib_Math.c,226 :: 		
0x00AC	0x3010      	MOVLW      16
;__Lib_Math.c,227 :: 		
0x00AD	0x00FC      	MOVWF      R12
;__Lib_Math.c,228 :: 		
0x00AE	0x0D71      	RLF        R1, 0
;__Lib_Math.c,229 :: 		
0x00AF	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,230 :: 		
0x00B0	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,231 :: 		
0x00B1	0x0874      	MOVF       R4, 0
;__Lib_Math.c,232 :: 		
0x00B2	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,233 :: 		
0x00B3	0x0875      	MOVF       R5, 0
;__Lib_Math.c,234 :: 		
0x00B4	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,235 :: 		
0x00B5	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,236 :: 		
0x00B6	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,237 :: 		
0x00B7	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,238 :: 		
0x00B8	0x28C0      	GOTO       $+8
;__Lib_Math.c,239 :: 		
0x00B9	0x0874      	MOVF       R4, 0
;__Lib_Math.c,240 :: 		
0x00BA	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,241 :: 		
0x00BB	0x0875      	MOVF       R5, 0
;__Lib_Math.c,242 :: 		
0x00BC	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,243 :: 		
0x00BD	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,244 :: 		
0x00BE	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,245 :: 		
0x00BF	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,246 :: 		
0x00C0	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,247 :: 		
0x00C1	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,248 :: 		
0x00C2	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,249 :: 		
0x00C3	0x28AE      	GOTO       $-21
;__Lib_Math.c,251 :: 		
L_end_Div_16X16_U:
0x00C4	0x0008      	RETURN
; end of _Div_16X16_U
_Mul_16X16_U:
;__Lib_Math.c,136 :: 		
;__Lib_Math.c,143 :: 		
0x00C5	0x1283      	BCF        STATUS, 5
;__Lib_Math.c,144 :: 		
0x00C6	0x1303      	BCF        STATUS, 6
;__Lib_Math.c,145 :: 		
0x00C7	0x01FB      	CLRF       R11
;__Lib_Math.c,146 :: 		
0x00C8	0x01FA      	CLRF       R10
;__Lib_Math.c,147 :: 		
0x00C9	0x01F9      	CLRF       R9
;__Lib_Math.c,148 :: 		
0x00CA	0x3080      	MOVLW      128
;__Lib_Math.c,149 :: 		
0x00CB	0x00F8      	MOVWF      R8
;__Lib_Math.c,150 :: 		
0x00CC	0x0CF1      	RRF        R1, 1
;__Lib_Math.c,151 :: 		
0x00CD	0x0CF0      	RRF        R0, 1
;__Lib_Math.c,152 :: 		
0x00CE	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,153 :: 		
0x00CF	0x28D9      	GOTO       $+10
;__Lib_Math.c,154 :: 		
0x00D0	0x0874      	MOVF       R4, 0
;__Lib_Math.c,155 :: 		
0x00D1	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,156 :: 		
0x00D2	0x0875      	MOVF       R5, 0
;__Lib_Math.c,157 :: 		
0x00D3	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,158 :: 		
0x00D4	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,159 :: 		
0x00D5	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,160 :: 		
0x00D6	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,161 :: 		
0x00D7	0x0AFB      	INCF       R11, 1
;__Lib_Math.c,162 :: 		
0x00D8	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,163 :: 		
0x00D9	0x1FF0      	BTFSS      R0, 7
;__Lib_Math.c,164 :: 		
0x00DA	0x28E1      	GOTO       $+7
;__Lib_Math.c,165 :: 		
0x00DB	0x0874      	MOVF       R4, 0
;__Lib_Math.c,166 :: 		
0x00DC	0x07FA      	ADDWF      R10, 1
;__Lib_Math.c,167 :: 		
0x00DD	0x0875      	MOVF       R5, 0
;__Lib_Math.c,168 :: 		
0x00DE	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,169 :: 		
0x00DF	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,170 :: 		
0x00E0	0x07FB      	ADDWF      R11, 1
;__Lib_Math.c,171 :: 		
0x00E1	0x0CFB      	RRF        R11, 1
;__Lib_Math.c,172 :: 		
0x00E2	0x0CFA      	RRF        R10, 1
;__Lib_Math.c,173 :: 		
0x00E3	0x0CF9      	RRF        R9, 1
;__Lib_Math.c,174 :: 		
0x00E4	0x0CF8      	RRF        R8, 1
;__Lib_Math.c,175 :: 		
0x00E5	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,176 :: 		
0x00E6	0x28CC      	GOTO       $-26
;__Lib_Math.c,177 :: 		
0x00E7	0x087B      	MOVF       R11, 0
;__Lib_Math.c,178 :: 		
0x00E8	0x00F3      	MOVWF      R3
;__Lib_Math.c,179 :: 		
0x00E9	0x087A      	MOVF       R10, 0
;__Lib_Math.c,180 :: 		
0x00EA	0x00F2      	MOVWF      R2
;__Lib_Math.c,181 :: 		
0x00EB	0x0879      	MOVF       R9, 0
;__Lib_Math.c,182 :: 		
0x00EC	0x00F1      	MOVWF      R1
;__Lib_Math.c,183 :: 		
0x00ED	0x0878      	MOVF       R8, 0
;__Lib_Math.c,184 :: 		
0x00EE	0x00F0      	MOVWF      R0
;__Lib_Math.c,187 :: 		
L_end_Mul_16X16_U:
0x00EF	0x0008      	RETURN
; end of _Mul_16X16_U
_main:
0x00F0	0x1283      	BCF        STATUS, 5
0x00F1	0x1303      	BCF        STATUS, 6
0x00F2	0x01A1      	CLRF       _EchoStartEnd
0x00F3	0x01A2      	CLRF       _OverFlow
0x00F4	0x01A3      	CLRF       35
0x00F5	0x01A4      	CLRF       _EchoTime
0x00F6	0x01A5      	CLRF       37
0x00F7	0x01A6      	CLRF       _waste
0x00F8	0x01A7      	CLRF       _Delay_Counter
0x00F9	0x01A8      	CLRF       40
0x00FA	0x01A9      	CLRF       _Distance
;emmbeded_try_final.c,84 :: 		void main()
;emmbeded_try_final.c,86 :: 		TRISB = 0xFF;                     // PORTB as an input
0x00FB	0x30FF      	MOVLW      255
0x00FC	0x1683      	BSF        STATUS, 5
0x00FD	0x0086      	MOVWF      TRISB
;emmbeded_try_final.c,87 :: 		TRISC = 0x00;                     // PORTC as an output
0x00FE	0x0187      	CLRF       TRISC
;emmbeded_try_final.c,88 :: 		PORTC = 0x00;                     // Initializing PORTC as LOW
0x00FF	0x1283      	BCF        STATUS, 5
0x0100	0x0187      	CLRF       PORTC
;emmbeded_try_final.c,89 :: 		TRISD = 0x00;                     // PORTD as an output
0x0101	0x1683      	BSF        STATUS, 5
0x0102	0x0188      	CLRF       TRISD
;emmbeded_try_final.c,90 :: 		PORTD = 0x00;                     // Initializing PORTD as LOW
0x0103	0x1283      	BCF        STATUS, 5
0x0104	0x0188      	CLRF       PORTD
;emmbeded_try_final.c,92 :: 		INTCON = 0xB0;                    // GIE, T0IE, INTE, and RBIE are enabled
0x0105	0x30B0      	MOVLW      176
0x0106	0x008B      	MOVWF      INTCON
;emmbeded_try_final.c,93 :: 		OPTION_REG = 0x40;                // Interrupt edge select bit = 1
0x0107	0x3040      	MOVLW      64
0x0108	0x1683      	BSF        STATUS, 5
0x0109	0x0081      	MOVWF      OPTION_REG
;emmbeded_try_final.c,96 :: 		PORTD = 0x0A;                      // D5 ON = Mid ultrasonic is on
0x010A	0x300A      	MOVLW      10
0x010B	0x1283      	BCF        STATUS, 5
0x010C	0x0088      	MOVWF      PORTD
;emmbeded_try_final.c,97 :: 		msDelay(500);
0x010D	0x30F4      	MOVLW      244
0x010E	0x00AE      	MOVWF      FARG_msDelay_Time
0x010F	0x3001      	MOVLW      1
0x0110	0x00AF      	MOVWF      FARG_msDelay_Time+1
0x0111	0x2086      	CALL       _msDelay
;emmbeded_try_final.c,98 :: 		while(1)
L_main6:
;emmbeded_try_final.c,101 :: 		CheckFront();
0x0112	0x207D      	CALL       _CheckFront
;emmbeded_try_final.c,103 :: 		if(Distance < 10)
0x0113	0x300A      	MOVLW      10
0x0114	0x0229      	SUBWF      _Distance, 0
0x0115	0x1803      	BTFSC      STATUS, 0
0x0116	0x2938      	GOTO       L_main8
;emmbeded_try_final.c,105 :: 		PORTD=0X00;   //OFF
0x0117	0x0188      	CLRF       PORTD
;emmbeded_try_final.c,106 :: 		msDelay(250);  // Call a delay of  seconds
0x0118	0x30FA      	MOVLW      250
0x0119	0x00AE      	MOVWF      FARG_msDelay_Time
0x011A	0x01AF      	CLRF       FARG_msDelay_Time+1
0x011B	0x2086      	CALL       _msDelay
;emmbeded_try_final.c,109 :: 		if(PORTD & 0b00000010)
0x011C	0x1C88      	BTFSS      PORTD, 1
0x011D	0x2930      	GOTO       L_main9
;emmbeded_try_final.c,111 :: 		if(PORTD & 0b00000100)
0x011E	0x1D08      	BTFSS      PORTD, 2
0x011F	0x2928      	GOTO       L_main10
;emmbeded_try_final.c,113 :: 		PORTD=0X05; //back
0x0120	0x3005      	MOVLW      5
0x0121	0x0088      	MOVWF      PORTD
;emmbeded_try_final.c,114 :: 		msDelay(500);
0x0122	0x30F4      	MOVLW      244
0x0123	0x00AE      	MOVWF      FARG_msDelay_Time
0x0124	0x3001      	MOVLW      1
0x0125	0x00AF      	MOVWF      FARG_msDelay_Time+1
0x0126	0x2086      	CALL       _msDelay
;emmbeded_try_final.c,116 :: 		}
0x0127	0x292F      	GOTO       L_main11
L_main10:
;emmbeded_try_final.c,119 :: 		PORTD = 0x08;
0x0128	0x3008      	MOVLW      8
0x0129	0x0088      	MOVWF      PORTD
;emmbeded_try_final.c,120 :: 		msDelay(500);   //left
0x012A	0x30F4      	MOVLW      244
0x012B	0x00AE      	MOVWF      FARG_msDelay_Time
0x012C	0x3001      	MOVLW      1
0x012D	0x00AF      	MOVWF      FARG_msDelay_Time+1
0x012E	0x2086      	CALL       _msDelay
;emmbeded_try_final.c,121 :: 		}
L_main11:
;emmbeded_try_final.c,122 :: 		}
0x012F	0x2937      	GOTO       L_main12
L_main9:
;emmbeded_try_final.c,125 :: 		PORTD = 0x02; //RIGHT
0x0130	0x3002      	MOVLW      2
0x0131	0x0088      	MOVWF      PORTD
;emmbeded_try_final.c,126 :: 		msDelay(500);
0x0132	0x30F4      	MOVLW      244
0x0133	0x00AE      	MOVWF      FARG_msDelay_Time
0x0134	0x3001      	MOVLW      1
0x0135	0x00AF      	MOVWF      FARG_msDelay_Time+1
0x0136	0x2086      	CALL       _msDelay
;emmbeded_try_final.c,128 :: 		}
L_main12:
;emmbeded_try_final.c,129 :: 		}
0x0137	0x293A      	GOTO       L_main13
L_main8:
;emmbeded_try_final.c,132 :: 		PORTD=0X0A;  //FORWARD
0x0138	0x300A      	MOVLW      10
0x0139	0x0088      	MOVWF      PORTD
;emmbeded_try_final.c,134 :: 		}
L_main13:
;emmbeded_try_final.c,135 :: 		}
0x013A	0x2912      	GOTO       L_main6
;emmbeded_try_final.c,137 :: 		}
L_end_main:
0x013B	0x293B      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [88]    _Interrupt
0x005C       [7]    _____DoICP
0x0063      [26]    _SendTrigger
0x007D       [9]    _CheckFront
0x0086      [22]    _msDelay
0x009C      [12]    ___CC2DW
0x00A8      [29]    _Div_16X16_U
0x00C5      [43]    _Mul_16X16_U
0x00F0      [76]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x0021       [1]    _EchoStartEnd
0x0022       [2]    _OverFlow
0x0024       [2]    _EchoTime
0x0026       [1]    _waste
0x0027       [2]    _Delay_Counter
0x0029       [1]    _Distance
0x002A       [2]    ___DoICPAddr
0x002C       [1]    ___saveSTATUS
0x002D       [1]    ___savePCLATH
0x002E       [2]    FARG_msDelay_Time
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
